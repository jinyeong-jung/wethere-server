type Chat {
  id: Int!
  messages: [Message]
  couple: Couple!
  createdAt: String!
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  createdAt: String!
}

type Comment {
  id: Int!
  feed: Feed!
  text: String!
  user: User!
  createdAt: String!
}

type CompleteCoupleVerificationResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  CompleteCoupleVerification(phoneNumber: String!, key: String!): CompleteCoupleVerificationResponse!
  RequestCoupleVerification(partnerPhoneNumber: String!): RequestCoupleVerificationResponse!
  AddPlace(name: String!, lat: Float!, lng: Float!, address: String!, isVisited: Boolean!): AddPlaceResponse!
  DeletePlace(placeId: Int!): DeletePlaceResponse!
  EditPlace(placeId: Int!, name: String, isVisited: Boolean): EditPlaceResponse!
  FacebookLogin(facebookId: String!, name: String!): FacebookLoginResponse!
  GoogleLogin(googleId: String!, name: String!, imageUrl: String): GoogleLoginResponse!
  KakaoLogin(kakaoId: String!, nickname: String!, thumbnail: String): KakaoLoginResponse!
  Login(username: String!, password: String!): LoginResponse!
  NaverLogin(naverId: String!, nickname: String!, imageUrl: String): NaverLoginResponse!
  SignUpEnd(phoneNumber: String!, key: String!): SignUpEndResponse!
  SignUpStart(username: String!, password: String!, phoneNumber: String!): SignUpStartResponse!
  UpdateMyProfile(nickname: String, gender: genderOptions, birth: String, status: statusOptions, profilePhoto: String, phoneNumber: String): UpdateMyProfileResponse!
}

type RequestCoupleVerificationResponse {
  ok: Boolean!
  error: String
}

type Couple {
  id: Int!
  verified: Boolean!
  partnerOne: User!
  partnerTwo: User
  firstDate: String
  chat: Chat
  places: [Place]
  coupleVerification: CoupleVerification
  createdAt: String!
}

type CoupleVerification {
  id: Int!
  payload: String!
  key: String!
  verified: Boolean!
  couple: Couple!
  createdAt: String!
}

type Feed {
  id: Int!
  user: User!
  text: String!
  feedPicture: String
  comments: [Comment]
  place: Place
  createdAt: String!
}

type AddPlaceResponse {
  ok: Boolean!
  error: String
}

type DeletePlaceResponse {
  ok: Boolean!
  error: String
}

type EditPlaceResponse {
  ok: Boolean!
  error: String
}

type Place {
  id: Int!
  couple: Couple!
  name: String!
  lat: Float!
  lng: Float!
  address: String!
  isVisited: Boolean!
  feeds: [Feed]
  createdAt: String!
}

type FacebookLoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type Query {
  GetMyProfile: GetMyProfileResponse!
}

type GoogleLoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type KakaoLoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type LoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type NaverLoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type User {
  id: Int!
  username: String
  password: String
  phoneNumber: String
  verifiedPhoneNumber: Boolean!
  facebookId: String
  googleId: String
  kakaoId: String
  naverId: String
  nickname: String
  gender: String
  birth: String
  status: String
  profilePhoto: String
  lastLat: Float
  lastLng: Float
  feeds: [Feed]
  coupleForPartnerOne: Couple
  coupleForPartnerTwo: Couple
  comments: [Comment]
  createdAt: String!
}

type SignUpEndResponse {
  ok: Boolean!
  error: String
}

type SignUpStartResponse {
  ok: Boolean!
  error: String
}

type UpdateMyProfileResponse {
  ok: Boolean!
  error: String
}

enum genderOptions {
  MALE
  FEMALE
}

enum statusOptions {
  HAPPY
  DEPRESSED
  MAD
  ENERGIZED
  UNCERTAIN
  PEACEFUL
  CONFUSED
}

type Verification {
  id: Int!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
}
